{"version":3,"sources":["redux/reducers/index.js","redux/sagas/index.js","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["history","combineReducers","router","connectRouter","rootSaga","getState","all","createBrowserHistory","routeMiddleware","routerMiddleware","sagaMiddleware","createSagaMiddleware","middlewares","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","initialState","createStore","reducers","applyMiddleware","run","configureStore","SignIn","lazy","App","className","path","component","fallback","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+TAGe,WAACA,GAAD,OAAaC,YAAgB,CAC1CC,OAAQC,YAAcH,M,oDCFCI,GAAV,SAAUA,EAASC,GAAnB,iEACb,OADa,SACPC,YAAI,IADG,uCCKf,IAAMN,EAAUO,cACVC,EAAkBC,YAAiBT,GACnCU,EAAiBC,cAEjBC,EAAc,CAACF,EAAgBF,GAC/BK,EAAmBC,OAAOC,sCAAwCC,ICJxE,IAAMC,EDOS,SAAwBC,GACrC,IAAMD,EAAQE,YAAYC,EAASpB,GAAUkB,EAC3CL,EAAiBQ,IAAe,WAAf,EAAmBT,KAWtC,OATAF,EAAeY,IAAIlB,GASZa,ECpBKM,GACRvB,EAAUO,cACViB,EAASC,gBAAK,kBAAM,sDAiCXC,E,iLA7BX,OACE,yBAAKC,UAAU,WACb,kBAAC,IAAD,CAAUV,MAAOA,GACf,kBAAC,IAAD,CAAiBjB,QAASA,GACxB,kBAAC,IAAD,KASE,kBAAC,IAAD,CACE4B,KAAK,UACLC,UAAW,kBACT,kBAAC,WAAD,CAAUC,SAAU,qCAClB,kBAACN,EAAD,kB,GAnBFO,IAAMC,WCAJC,QACW,cAA7BnB,OAAOoB,SAASC,UAEe,UAA7BrB,OAAOoB,SAASC,UAEhBrB,OAAOoB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.21245934.chunk.js","sourcesContent":["import {combineReducers} from 'redux';\r\nimport {connectRouter} from 'connected-react-router';\r\n\r\nexport default (history) => combineReducers({\r\n  router: connectRouter(history),\r\n});","import { all } from 'redux-saga/effects';\r\n\r\nexport default function* rootSaga(getState) {\r\n  yield all([\r\n  ]);\r\n}\r\n\r\n","import {applyMiddleware, compose, createStore} from 'redux';\r\nimport reducers from './reducers/index';\r\nimport {createBrowserHistory} from 'history'\r\nimport {routerMiddleware} from 'connected-react-router';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from './sagas/index';\r\n\r\nconst history = createBrowserHistory();\r\nconst routeMiddleware = routerMiddleware(history);\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst middlewares = [sagaMiddleware, routeMiddleware];\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\n\r\nexport default function configureStore(initialState) {\r\n  const store = createStore(reducers(history), initialState,\r\n    composeEnhancers(applyMiddleware(...middlewares)));\r\n\r\n  sagaMiddleware.run(rootSaga);\r\n\r\n  if (module.hot) {\r\n    // Enable Webpack hot module replacement for reducers\r\n    module.hot.accept('./reducers/index', () => {\r\n      const nextRootReducer = require('./reducers/index');\r\n      store.replaceReducer(nextRootReducer);\r\n    });\r\n  }\r\n  return store;\r\n}\r\nexport {history};\r\n","import React, { Suspense, lazy } from 'react';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { Provider } from 'react-redux';\nimport './App.css';\nimport { Route, Switch } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport configureStore from './redux/store';\n\nconst store = configureStore();\nconst history = createBrowserHistory();\nconst SignIn = lazy(() => import('./container/SignIn'));\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"mainApp\">\n        <Provider store={store}>\n          <ConnectedRouter history={history}>\n            <Switch>\n              {/* <Route\n                path=\"/login\"\n                component={() => (\n                  <Suspense fallback={<div>...</div>}>\n                    <Login />\n                  </Suspense>\n                )}\n              /> */}\n              <Route\n                path=\"/signin\"\n                component={() => (\n                  <Suspense fallback={<div>...</div>}>\n                    <SignIn />\n                  </Suspense>\n                )}\n              />\n            </Switch>\n          </ConnectedRouter>\n        </Provider>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}